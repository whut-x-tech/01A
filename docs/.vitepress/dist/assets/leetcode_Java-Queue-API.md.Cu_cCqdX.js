import{_ as a,C as t,c as e,o as n,ah as l,G as h}from"./chunks/framework.JQl5l04a.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"leetcode/Java-Queue-API.md","filePath":"leetcode/Java-Queue-API.md","lastUpdated":1742053813000}'),p={name:"leetcode/Java-Queue-API.md"};function k(d,s,r,E,o,g){const i=t("Artalk");return n(),e("div",null,[s[0]||(s[0]=l(`<h2 id="🚩-java-queue-接口-api-介绍-leetcode-刷题常用" tabindex="-1">🚩 Java Queue 接口 API 介绍（LeetCode 刷题常用） <a class="header-anchor" href="#🚩-java-queue-接口-api-介绍-leetcode-刷题常用" aria-label="Permalink to &quot;🚩 Java Queue 接口 API 介绍（LeetCode 刷题常用）&quot;">​</a></h2><hr><h3 id="一、常用实现类" tabindex="-1">一、常用实现类： <a class="header-anchor" href="#一、常用实现类" aria-label="Permalink to &quot;一、常用实现类：&quot;">​</a></h3><ul><li><code>LinkedList</code>（最常用）</li><li><code>ArrayDeque</code>（性能稍优，推荐使用）</li><li><code>PriorityQueue</code>（优先级队列，自动排序，默认小顶堆）</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Queue&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; queue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Queue&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; queue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayDeque&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Queue&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; pq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PriorityQueue&lt;&gt;();</span></span></code></pre></div><hr><h3 id="二、常用方法" tabindex="-1">二、常用方法： <a class="header-anchor" href="#二、常用方法" aria-label="Permalink to &quot;二、常用方法：&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方法名</th><th>说明</th><th>抛异常情况</th></tr></thead><tbody><tr><td><strong>offer(E e)</strong></td><td>添加元素到队尾（推荐用）</td><td>无，失败返回false</td></tr><tr><td><strong>add(E e)</strong></td><td>添加元素到队尾（不常用）</td><td>队列满时抛异常</td></tr><tr><td><strong>poll()</strong></td><td>移除并返回队首元素</td><td>无元素时返回null</td></tr><tr><td><strong>remove()</strong></td><td>移除并返回队首元素</td><td>无元素时抛异常</td></tr><tr><td><strong>peek()</strong></td><td>返回队首元素，但不移除</td><td>无元素时返回null</td></tr><tr><td><strong>element()</strong></td><td>返回队首元素，但不移除</td><td>无元素时抛异常</td></tr><tr><td><strong>isEmpty()</strong></td><td>队列是否为空</td><td>无异常情况</td></tr><tr><td><strong>size()</strong></td><td>返回队列元素个数</td><td>无异常情况</td></tr><tr><td><strong>clear()</strong></td><td>清空队列</td><td>无异常情况</td></tr></tbody></table><hr><h2 id="🚩-使用举例-leetcode-常用" tabindex="-1">🚩 使用举例（LeetCode 常用）： <a class="header-anchor" href="#🚩-使用举例-leetcode-常用" aria-label="Permalink to &quot;🚩 使用举例（LeetCode 常用）：&quot;">​</a></h2><h3 id="示例1-基础队列-bfs-常见场景" tabindex="-1">示例1：基础队列（BFS 常见场景） <a class="header-anchor" href="#示例1-基础队列-bfs-常见场景" aria-label="Permalink to &quot;示例1：基础队列（BFS 常见场景）&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Queue&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; queue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">offer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">offer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">offer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">poll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取并删除队首元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(current);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1</span></span>
<span class="line"><span>2</span></span>
<span class="line"><span>3</span></span></code></pre></div><hr><h3 id="示例2-优先队列-最小堆-自动排序" tabindex="-1">示例2：优先队列（最小堆，自动排序）： <a class="header-anchor" href="#示例2-优先队列-最小堆-自动排序" aria-label="Permalink to &quot;示例2：优先队列（最小堆，自动排序）：&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Queue&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; pq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PriorityQueue&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pq.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">offer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pq.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">offer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pq.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">offer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pq.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pq.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">poll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>输出（从小到大自动排序）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1</span></span>
<span class="line"><span>3</span></span>
<span class="line"><span>5</span></span></code></pre></div><hr><h2 id="🚩-实践经验-leetcode刷题技巧" tabindex="-1">🚩 实践经验（LeetCode刷题技巧）： <a class="header-anchor" href="#🚩-实践经验-leetcode刷题技巧" aria-label="Permalink to &quot;🚩 实践经验（LeetCode刷题技巧）：&quot;">​</a></h2><ul><li>推荐使用 <code>offer()</code> / <code>poll()</code> / <code>peek()</code> 这一组方法，它们在队列为空或满时不会抛异常，而是返回<code>null</code>或<code>false</code>，更安全。</li><li>BFS 过程中，使用 <code>LinkedList</code> 或 <code>ArrayDeque</code> 性能都不错（推荐 <code>ArrayDeque</code> 更高效一些）。</li><li>如果需要取最大或最小元素，使用<code>PriorityQueue</code>（默认最小堆），还可自定义比较器：</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Queue&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; maxHeap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PriorityQueue&lt;&gt;((a, b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a);</span></span></code></pre></div><hr><h2 id="🎯-快速记忆" tabindex="-1">🎯 快速记忆： <a class="header-anchor" href="#🎯-快速记忆" aria-label="Permalink to &quot;🎯 快速记忆：&quot;">​</a></h2><table tabindex="0"><thead><tr><th>常规操作</th><th>推荐方法组合</th></tr></thead><tbody><tr><td>入队</td><td><code>offer(e)</code></td></tr><tr><td>出队</td><td><code>poll()</code></td></tr><tr><td>查看队头</td><td><code>peek()</code></td></tr></tbody></table>`,26)),h(i)])}const u=a(p,[["render",k]]);export{y as __pageData,u as default};
