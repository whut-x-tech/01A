import{_ as a,C as n,c as t,o as l,ah as h,G as p}from"./chunks/framework.JQl5l04a.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"leetcode/algo_mode.md","filePath":"leetcode/algo_mode.md","lastUpdated":1742053813000}'),k={name:"leetcode/algo_mode.md"};function e(d,s,r,E,g,y){const i=n("Artalk");return l(),t("div",null,[s[0]||(s[0]=h(`<h2 id="📝-面试算法通关秘籍-手撕-vs-笔试双线作战指南" tabindex="-1">📝 面试算法通关秘籍：手撕 VS 笔试双线作战指南 <a class="header-anchor" href="#📝-面试算法通关秘籍-手撕-vs-笔试双线作战指南" aria-label="Permalink to &quot;📝 面试算法通关秘籍：手撕 VS 笔试双线作战指南&quot;">​</a></h2><p>💻 笔试/机试生存法则 ✅ 首推 C++ 三大优势： 1️⃣ 🚀 STL 三剑客：vector/string/unordered_map 开箱即用 2️⃣ ⚡ 性能碾压：同等思路下比 Python/Java 快 3-5 倍 3️⃣ 📚 题解覆盖率：90%+ 的算法题解提供 C++ 版本</p><p>🎯 应试技巧：</p><ul><li>✨ 提前准备万能模板：</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 万能输入处理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 核心逻辑区</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>🧠 暴力解法保平安：30% 分数 &gt; 0 分</li><li>⏱ 复杂题卡壳时：先写伪代码注释再填空</li></ul><p>✍️ 手撕算法生存指南 🗣 关键谈判技巧： &quot;面试官您好，我能否使用 Core Code Mode 来展示算法逻辑？这样能更聚焦问题本质～&quot;</p><p>🌟 核心代码模式优势： 1️⃣ 🎯 专注算法骨架：不用纠结输入输出格式 2️⃣ 🚫 规避边界陷阱：减少 50% 的调试时间 3️⃣ 💬 提升表达效率：直接讨论算法思想</p><p>🌰 示例对比：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 传统 ACM 模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nums </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().split()))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ------------ 分割线 ------------</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 核心代码模式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> find_target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nums, target):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    left, right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nums)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (left</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">right)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums[mid] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # ... 后续逻辑</span></span></code></pre></div><p>⚡ 备战双线策略： 1️⃣ 📅 前 2 周主攻 C++ 刷题（LeetCode+牛客） 2️⃣ 💻 最后 3 天突击核心代码模板 3️⃣ 🤝 模拟面试时主动练习模式切换话术</p><h4 id="🌈-终极心法-笔试是程序正确性的较量-面试是思维透明度的展示-掌握双模式切换-offer-双倍到手-🎉" tabindex="-1">🌈 终极心法：笔试是程序正确性的较量，面试是思维透明度的展示！掌握双模式切换，offer 双倍到手 🎉 <a class="header-anchor" href="#🌈-终极心法-笔试是程序正确性的较量-面试是思维透明度的展示-掌握双模式切换-offer-双倍到手-🎉" aria-label="Permalink to &quot;🌈 终极心法：笔试是程序正确性的较量，面试是思维透明度的展示！掌握双模式切换，offer 双倍到手 🎉&quot;">​</a></h4>`,12)),p(i)])}const F=a(k,[["render",e]]);export{c as __pageData,F as default};
