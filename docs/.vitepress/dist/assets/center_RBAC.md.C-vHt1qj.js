import{_ as n,C as e,c as l,o as i,ah as p,G as r}from"./chunks/framework.JQl5l04a.js";const M=JSON.parse('{"title":"RBAC 权限控制模型学习","description":"","frontmatter":{},"headers":[],"relativePath":"center/RBAC.md","filePath":"center/RBAC.md","lastUpdated":1742056691000}'),t={name:"center/RBAC.md"};function o(c,a,E,d,T,h){const s=e("Artalk");return i(),l("div",null,[a[0]||(a[0]=p(`<h1 id="rbac-权限控制模型学习" tabindex="-1">RBAC 权限控制模型学习 <a class="header-anchor" href="#rbac-权限控制模型学习" aria-label="Permalink to &quot;RBAC 权限控制模型学习&quot;">​</a></h1><h2 id="_1-什么是-rbac" tabindex="-1">1. 什么是 RBAC？ <a class="header-anchor" href="#_1-什么是-rbac" aria-label="Permalink to &quot;1. 什么是 RBAC？&quot;">​</a></h2><p>RBAC（Role-Based Access Control，基于角色的访问控制）是一种权限管理模型，通过将权限分配给角色，再将角色分配给用户，来实现对系统资源的访问控制。RBAC 的核心思想是将用户与权限分离，通过角色作为中间层来管理权限。</p><h2 id="_2-rbac-的核心概念" tabindex="-1">2. RBAC 的核心概念 <a class="header-anchor" href="#_2-rbac-的核心概念" aria-label="Permalink to &quot;2. RBAC 的核心概念&quot;">​</a></h2><h3 id="_2-1-用户-user" tabindex="-1">2.1 用户（User） <a class="header-anchor" href="#_2-1-用户-user" aria-label="Permalink to &quot;2.1 用户（User）&quot;">​</a></h3><ul><li>系统中的个体，可以是人、设备或其他实体。</li><li>用户通过被分配角色来获得权限。</li></ul><h4 id="用户表如下" tabindex="-1">用户表如下 <a class="header-anchor" href="#用户表如下" aria-label="Permalink to &quot;用户表如下&quot;">​</a></h4><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE users (</span></span>
<span class="line"><span>    id INT AUTO_INCREMENT PRIMARY KEY COMMENT &#39;用户ID&#39;,</span></span>
<span class="line"><span>    username VARCHAR(50) NOT NULL UNIQUE COMMENT &#39;用户名&#39;,</span></span>
<span class="line"><span>    password VARCHAR(255) NOT NULL COMMENT &#39;密码（加密存储）&#39;,</span></span>
<span class="line"><span>    email VARCHAR(100) COMMENT &#39;邮箱&#39;,</span></span>
<span class="line"><span>    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span></span>
<span class="line"><span>    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;</span></span>
<span class="line"><span>) COMMENT=&#39;用户表&#39;;</span></span></code></pre></div><h3 id="_2-2-角色-role" tabindex="-1">2.2 角色（Role） <a class="header-anchor" href="#_2-2-角色-role" aria-label="Permalink to &quot;2.2 角色（Role）&quot;">​</a></h3><ul><li>一组权限的集合。</li><li>角色可以分配给一个或多个用户。</li><li>例如：管理员、编辑、访客等。</li></ul><h4 id="角色表如下" tabindex="-1">角色表如下 <a class="header-anchor" href="#角色表如下" aria-label="Permalink to &quot;角色表如下&quot;">​</a></h4><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE roles (</span></span>
<span class="line"><span>    id INT AUTO_INCREMENT PRIMARY KEY COMMENT &#39;角色ID&#39;,</span></span>
<span class="line"><span>    role_name VARCHAR(50) NOT NULL UNIQUE COMMENT &#39;角色名称&#39;,</span></span>
<span class="line"><span>    description VARCHAR(255) COMMENT &#39;角色描述&#39;,</span></span>
<span class="line"><span>    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span></span>
<span class="line"><span>    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;</span></span>
<span class="line"><span>) COMMENT=&#39;角色表&#39;;</span></span></code></pre></div><h3 id="_2-3-权限-permission" tabindex="-1">2.3 权限（Permission） <a class="header-anchor" href="#_2-3-权限-permission" aria-label="Permalink to &quot;2.3 权限（Permission）&quot;">​</a></h3><ul><li>对系统资源的操作权限。</li><li>例如：读取文件、写入数据库、删除记录等。</li></ul><p>权限表如下</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE permissions (</span></span>
<span class="line"><span>    id INT AUTO_INCREMENT PRIMARY KEY COMMENT &#39;权限ID&#39;,</span></span>
<span class="line"><span>    permission_name VARCHAR(100) NOT NULL UNIQUE COMMENT &#39;权限名称&#39;,</span></span>
<span class="line"><span>    description VARCHAR(255) COMMENT &#39;权限描述&#39;,</span></span>
<span class="line"><span>    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span></span>
<span class="line"><span>    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;</span></span>
<span class="line"><span>) COMMENT=&#39;权限表&#39;;</span></span></code></pre></div><h3 id="_2-4-会话-session" tabindex="-1">2.4 会话（Session） <a class="header-anchor" href="#_2-4-会话-session" aria-label="Permalink to &quot;2.4 会话（Session）&quot;">​</a></h3><ul><li>用户与系统之间的交互过程。</li><li>用户在会话中激活一个或多个角色，从而获得相应的权限。</li></ul><h2 id="_3-rbac-的核心模型-core-rbac" tabindex="-1">3. RBAC 的核心模型（Core RBAC） <a class="header-anchor" href="#_3-rbac-的核心模型-core-rbac" aria-label="Permalink to &quot;3. RBAC 的核心模型（Core RBAC）&quot;">​</a></h2><ul><li>用户、角色、权限之间的关系。</li><li>用户与角色之间是多对多的关系。</li><li>角色与权限之间也是多对多的关系。</li></ul><h4 id="用户角色关联表" tabindex="-1">用户角色关联表 <a class="header-anchor" href="#用户角色关联表" aria-label="Permalink to &quot;用户角色关联表&quot;">​</a></h4><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE user_roles (</span></span>
<span class="line"><span>    user_id INT NOT NULL COMMENT &#39;用户ID&#39;,</span></span>
<span class="line"><span>    role_id INT NOT NULL COMMENT &#39;角色ID&#39;,</span></span>
<span class="line"><span>    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span></span>
<span class="line"><span>    PRIMARY KEY (user_id, role_id),</span></span>
<span class="line"><span>    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,</span></span>
<span class="line"><span>    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE</span></span>
<span class="line"><span>) COMMENT=&#39;用户角色关联表&#39;;</span></span></code></pre></div><h4 id="角色权限关联表" tabindex="-1">角色权限关联表 <a class="header-anchor" href="#角色权限关联表" aria-label="Permalink to &quot;角色权限关联表&quot;">​</a></h4><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE role_permissions (</span></span>
<span class="line"><span>    role_id INT NOT NULL COMMENT &#39;角色ID&#39;,</span></span>
<span class="line"><span>    permission_id INT NOT NULL COMMENT &#39;权限ID&#39;,</span></span>
<span class="line"><span>    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span></span>
<span class="line"><span>    PRIMARY KEY (role_id, permission_id),</span></span>
<span class="line"><span>    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,</span></span>
<span class="line"><span>    FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE</span></span>
<span class="line"><span>) COMMENT=&#39;角色权限关联表&#39;;</span></span></code></pre></div><h2 id="_4-rbac-的应用场景" tabindex="-1">4. RBAC 的应用场景 <a class="header-anchor" href="#_4-rbac-的应用场景" aria-label="Permalink to &quot;4. RBAC 的应用场景&quot;">​</a></h2><ul><li><strong>企业管理系统</strong>：如 ERP、CRM 系统，不同部门有不同的权限需求。</li><li><strong>云服务平台</strong>：如 AWS、Azure，用户通过角色来管理云资源。</li><li><strong>内容管理系统</strong>：如 WordPress，不同用户角色有不同的内容管理权限。</li></ul><h2 id="_5-参考文献" tabindex="-1">5.参考文献 <a class="header-anchor" href="#_5-参考文献" aria-label="Permalink to &quot;5.参考文献&quot;">​</a></h2><ul><li><a href="https://csrc.nist.gov/projects/role-based-access-control" target="_blank" rel="noreferrer">NIST RBAC 标准</a></li><li><a href="https://en.wikipedia.org/wiki/Role-based_access_control" target="_blank" rel="noreferrer">RBAC 维基百科</a></li></ul>`,28)),r(s)])}const A=n(t,[["render",o]]);export{M as __pageData,A as default};
