import{_ as a,C as t,c as n,o as h,ah as l,G as k}from"./chunks/framework.JQl5l04a.js";const c=JSON.parse('{"title":"🔓📈 MySQL乐观锁终极指南 | 高并发场景下的生存法则与实战陷阱","description":"","frontmatter":{},"headers":[],"relativePath":"mysql/mysql-happy.md","filePath":"mysql/mysql-happy.md","lastUpdated":1742056093000}'),p={name:"mysql/mysql-happy.md"};function e(E,s,r,d,g,y){const i=t("Artalk");return h(),n("div",null,[s[0]||(s[0]=l(`<h1 id="🔓📈-mysql乐观锁终极指南-高并发场景下的生存法则与实战陷阱" tabindex="-1">🔓📈 MySQL乐观锁终极指南 | 高并发场景下的生存法则与实战陷阱 <a class="header-anchor" href="#🔓📈-mysql乐观锁终极指南-高并发场景下的生存法则与实战陷阱" aria-label="Permalink to &quot;🔓📈 MySQL乐观锁终极指南 | 高并发场景下的生存法则与实战陷阱&quot;">​</a></h1><hr><h3 id="🌟-乐观锁核心思想" tabindex="-1">🌟 乐观锁核心思想 <a class="header-anchor" href="#🌟-乐观锁核心思想" aria-label="Permalink to &quot;🌟 乐观锁核心思想&quot;">​</a></h3><p>&quot;相信世界是美好的！&quot;——乐观锁采用无锁设计，仅在数据提交时检测冲突。通过<strong>版本号机制</strong>实现原子性操作，是应对低冲突高并发场景的利器。</p><hr><h3 id="🔑-三大实现方案" tabindex="-1">🔑 三大实现方案 <a class="header-anchor" href="#🔑-三大实现方案" aria-label="Permalink to &quot;🔑 三大实现方案&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方案类型</th><th>实现方式</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>版本号机制</strong></td><td>新增version整型字段</td><td>库存扣减等高频写场景</td></tr><tr><td><strong>时间戳机制</strong></td><td>使用updated_at时间戳字段</td><td>带时间维度的业务场景</td></tr><tr><td><strong>CAS机制</strong></td><td>比较原值与内存值</td><td>简单计数器场景</td></tr></tbody></table><hr><h3 id="💻-核心代码解析-java版" tabindex="-1">💻 核心代码解析（Java版） <a class="header-anchor" href="#💻-核心代码解析-java版" aria-label="Permalink to &quot;💻 核心代码解析（Java版）&quot;">​</a></h3><h4 id="服务层关键逻辑" tabindex="-1">服务层关键逻辑 <a class="header-anchor" href="#服务层关键逻辑" aria-label="Permalink to &quot;服务层关键逻辑&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 🚨 特别注意：禁止声明事务注解！</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deduct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() throws InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1. 查询最新库存（不锁定）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Stock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; stocks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stockMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QueryWrapper&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Stock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;product_code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1002&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Stock stock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stocks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                       .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                       .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">orElseThrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;库存不存在&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2. 前置校验</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (stock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 3. 构造新版本对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 4. CAS原子更新（核心！）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> affectedRows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stockMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            stock,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UpdateWrapper&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Stock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 校验旧版本号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        );</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 5. 失败重试（指数退避更佳）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (affectedRows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ⚠️ 防止栈溢出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            deduct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 递归重试</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="mybatis映射配置" tabindex="-1">MyBatis映射配置 <a class="header-anchor" href="#mybatis映射配置" aria-label="Permalink to &quot;MyBatis映射配置&quot;">​</a></h4><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">update</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;updateWithVersion&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    UPDATE tb_stock </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SET count = #{count}, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version = version + 1 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    WHERE id = #{id} </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      AND version = #{version}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><hr><h3 id="⚠️-乐观锁三大致命伤" tabindex="-1">⚠️ 乐观锁三大致命伤 <a class="header-anchor" href="#⚠️-乐观锁三大致命伤" aria-label="Permalink to &quot;⚠️ 乐观锁三大致命伤&quot;">​</a></h3><ol><li><p><strong>🐢 高并发性能雪崩</strong><br><img src="https://imgtu.oss-cn-beijing.aliyuncs.com/blog_img/image-20250302172313387.png" alt="QPS对比图"><br> 当冲突率&gt;20%时，重试机制导致QPS断崖式下跌（实测仅~2)</p></li><li><p><strong>👻 ABA问题</strong></p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A[线程1读取version=1] --&gt; B[线程2修改version=2]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">B --&gt; C[线程3修改version=1]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A --&gt; D[线程1提交: 预期version=1 实际成功!]</span></span></code></pre></div><p><strong>解决方案</strong>：</p><ul><li>追加修改人/时间戳字段</li><li>使用AtomicStampedReference</li></ul></li><li><p><strong>📚 读写分离失效</strong><br> 主从同步延迟导致读取到旧版本数据<br><strong>应急方案</strong>：</p><ul><li>强制走主库查询</li><li>版本号+时间戳双校验</li></ul></li></ol><hr><h3 id="🧪-压测验证" tabindex="-1">🧪 压测验证 <a class="header-anchor" href="#🧪-压测验证" aria-label="Permalink to &quot;🧪 压测验证&quot;">​</a></h3><p><strong>测试配置</strong></p><ul><li>初始库存：5000</li><li>并发线程：100</li><li>循环次数：50次/线程</li></ul><p><strong>结果分析</strong><br> ✅ 数据一致性保障<br><img src="https://imgtu.oss-cn-beijing.aliyuncs.com/blog_img/image-20250302172341220.png" alt="库存归零截图"><br> 📉 性能对比：</p><table tabindex="0"><thead><tr><th>锁类型</th><th>QPS</th><th>CPU使用率</th></tr></thead><tbody><tr><td>无锁</td><td>1500+</td><td>90%</td></tr><tr><td>悲观锁</td><td>~10</td><td>60%</td></tr><tr><td>乐观锁</td><td>~2</td><td>30%</td></tr></tbody></table><hr><h3 id="💡-最佳实践指南" tabindex="-1">💡 最佳实践指南 <a class="header-anchor" href="#💡-最佳实践指南" aria-label="Permalink to &quot;💡 最佳实践指南&quot;">​</a></h3><ol><li><p><strong>版本号设计规范</strong></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb_stock </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ADD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DEFAULT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;乐观锁版本号&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><p><strong>重试策略优化</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 采用指数退避算法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> retries </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (retries </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAX_RETRIES) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        deduct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (OptimisticLockException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, retries) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        retries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>监控指标</strong></p><ul><li>冲突率 = 失败次数 / 总请求数</li><li>平均重试次数</li><li>最大版本跳跃值</li></ul></li></ol><hr><h3 id="📚-锁机制终极对决" tabindex="-1">📚 锁机制终极对决 <a class="header-anchor" href="#📚-锁机制终极对决" aria-label="Permalink to &quot;📚 锁机制终极对决&quot;">​</a></h3><table tabindex="0"><thead><tr><th></th><th>悲观锁</th><th>乐观锁</th></tr></thead><tbody><tr><td>实现层级</td><td>数据库层面</td><td>应用层面</td></tr><tr><td>冲突检测</td><td>实时检测</td><td>延迟检测</td></tr><tr><td>性能特点</td><td>吞吐量低，响应稳定</td><td>高吞吐，波动剧烈</td></tr><tr><td>适用场景</td><td>金融交易等高冲突场景</td><td>秒杀等突发流量场景</td></tr></tbody></table><hr><p>🔚 <strong>总结</strong>：乐观锁像精巧的瑞士军刀，在正确场景下能创造奇迹，但需要精心设计重试策略和监控体系。建议配合熔断降级策略使用，当冲突率超过阈值时自动切换为悲观锁，打造弹性并发控制系统！</p>`,30)),k(i)])}const F=a(p,[["render",e]]);export{c as __pageData,F as default};
