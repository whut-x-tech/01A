import{_ as a,C as n,c as t,o as l,ah as e,G as h}from"./chunks/framework.JQl5l04a.js";const u=JSON.parse('{"title":"rabbitmq五种模式的实现——springboot","description":"","frontmatter":{},"headers":[],"relativePath":"center/rabbitmq-sb.md","filePath":"center/rabbitmq-sb.md","lastUpdated":1742056691000}'),p={name:"center/rabbitmq-sb.md"};function k(o,s,r,d,g,c){const i=n("Artalk");return l(),t("div",null,[s[0]||(s[0]=e(`<h1 id="rabbitmq五种模式的实现——springboot" tabindex="-1">rabbitmq五种模式的实现——springboot <a class="header-anchor" href="#rabbitmq五种模式的实现——springboot" aria-label="Permalink to &quot;rabbitmq五种模式的实现——springboot&quot;">​</a></h1><blockquote><p>基础知识和javase的实现形式可以看我之前的博客</p><p>代码地址：<a href="https://github.com/9lucifer/rabbitmq4j-learning" target="_blank" rel="noreferrer">https://github.com/9lucifer/rabbitmq4j-learning</a></p></blockquote><h2 id="一、进行集成" tabindex="-1">一、进行集成 <a class="header-anchor" href="#一、进行集成" aria-label="Permalink to &quot;一、进行集成&quot;">​</a></h2><h3 id="一-spring-boot-集成-rabbitmq-概述" tabindex="-1">（一）Spring Boot 集成 RabbitMQ 概述 <a class="header-anchor" href="#一-spring-boot-集成-rabbitmq-概述" aria-label="Permalink to &quot;（一）Spring Boot 集成 RabbitMQ 概述&quot;">​</a></h3><p>Spring Boot 提供了对 RabbitMQ 的自动配置支持，通过 <code>RabbitTemplate</code> 和 <code>@RabbitListener</code> 可以方便地实现消息的生产和消费。以下是基于 Spring Boot 的 RabbitMQ 集成示例。</p><hr><h3 id="二-生产者代码解析" tabindex="-1">（二）生产者代码解析 <a class="header-anchor" href="#二-生产者代码解析" aria-label="Permalink to &quot;（二）生产者代码解析&quot;">​</a></h3><p>生产者负责创建消息并将其发送到指定的队列中。</p><h4 id="_1-配置文件-application-yml" tabindex="-1">1. 配置文件（application.yml） <a class="header-anchor" href="#_1-配置文件-application-yml" aria-label="Permalink to &quot;1. 配置文件（application.yml）&quot;">​</a></h4><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  rabbitmq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">自己服务器的ip</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # RabbitMQ 服务器地址</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5672</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               # RabbitMQ 端口号</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">admin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # RabbitMQ 用户名</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">admin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # RabbitMQ 密码</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    virtual-host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 虚拟主机（默认是 /）</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8081</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # 应用端口</span></span></code></pre></div><h4 id="_2-生产者代码-controller" tabindex="-1">2. 生产者代码（Controller） <a class="header-anchor" href="#_2-生产者代码-controller" aria-label="Permalink to &quot;2. 生产者代码（Controller）&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> top.miqiu.controller;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.amqp.rabbit.core.RabbitTemplate;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.web.bind.annotation.GetMapping;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.web.bind.annotation.RequestParam;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.web.bind.annotation.RestController;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SendController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RabbitTemplate rabbitTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/sendMsg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendMsg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 发送消息到队列 boot_queue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rabbitTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">convertAndSend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;boot_queue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;发送成功: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="关键" tabindex="-1">关键 <a class="header-anchor" href="#关键" aria-label="Permalink to &quot;关键&quot;">​</a></h4><ol><li><strong>RabbitTemplate</strong>：Spring 提供的 RabbitMQ 操作模板，用于发送消息。</li><li><strong>convertAndSend</strong>：发送消息到指定队列。</li><li><strong>@GetMapping</strong>：定义一个 GET 请求接口，路径为 <code>/sendMsg</code>。</li></ol><h4 id="效果" tabindex="-1">效果 <a class="header-anchor" href="#效果" aria-label="Permalink to &quot;效果&quot;">​</a></h4><p><img src="https://imgtu.oss-cn-beijing.aliyuncs.com/blog_img/image-20250216093813082.png" alt="image-20250216093813082"></p><hr><h3 id="三-消费者代码解析" tabindex="-1">（三）消费者代码解析 <a class="header-anchor" href="#三-消费者代码解析" aria-label="Permalink to &quot;（三）消费者代码解析&quot;">​</a></h3><p>消费者负责从队列中接收并处理消息。</p><h4 id="消费者代码-listener" tabindex="-1">消费者代码（Listener） <a class="header-anchor" href="#消费者代码-listener" aria-label="Permalink to &quot;消费者代码（Listener）&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> top.miqiu.controller;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.amqp.rabbit.annotation.Queue;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.amqp.rabbit.annotation.RabbitListener;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.stereotype.Component;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Receive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RabbitListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">queuesToDeclare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;boot_queue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consumer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;消息内容为：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="关键-1" tabindex="-1">关键 <a class="header-anchor" href="#关键-1" aria-label="Permalink to &quot;关键&quot;">​</a></h4><ol><li><strong>@RabbitListener</strong>：监听指定队列，当队列中有消息时，自动调用 <code>consumer</code> 方法。</li><li><strong>queuesToDeclare</strong>：如果队列不存在，会自动创建队列。</li></ol><h4 id="效果-1" tabindex="-1">效果 <a class="header-anchor" href="#效果-1" aria-label="Permalink to &quot;效果&quot;">​</a></h4><p><img src="https://imgtu.oss-cn-beijing.aliyuncs.com/blog_img/image-20250216093839842.png" alt="image-20250216093839842"></p><h2 id="二、工作模式" tabindex="-1">二、工作模式 <a class="header-anchor" href="#二、工作模式" aria-label="Permalink to &quot;二、工作模式&quot;">​</a></h2><h3 id="一-生产者" tabindex="-1">（一）生产者 <a class="header-anchor" href="#一-生产者" aria-label="Permalink to &quot;（一）生产者&quot;">​</a></h3><ol><li><p>生产者通过 <code>RabbitTemplate</code> 将消息发送到 RabbitMQ 的队列中。</p></li><li><p><strong>关键代码解析</strong></p><p>java复制</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rabbitTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">convertAndSend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;boot_work&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i);</span></span></code></pre></div><ul><li><strong><code>rabbitTemplate</code></strong>：RabbitMQ 的核心操作类，用于发送消息。</li><li><strong><code>convertAndSend</code> 方法</strong>： <ul><li>第一个参数是交换机名称（这里为空字符串，表示默认交换机）。</li><li>第二个参数是队列名称（<code>boot_work</code>）。</li><li>第三个参数是消息内容（<code>msg + i</code>）。</li></ul></li><li><strong>循环发送</strong>：代码中通过循环发送了 20 条消息，每条消息内容为 <code>msg + i</code>。</li></ul></li><li><p><strong>运行逻辑</strong> 生产者调用 <code>/sendMsg</code> 接口时，会将消息发送到队列 <code>boot_work</code> 中，消息内容为循环生成的字符串。</p></li></ol><hr><h3 id="二-消费者" tabindex="-1">（二）消费者 <a class="header-anchor" href="#二-消费者" aria-label="Permalink to &quot;（二）消费者&quot;">​</a></h3><ol><li><p><strong>功能描述</strong> 消费者从队列中接收消息并处理，处理完成后发送确认信号。</p></li><li><p><strong>关键代码解析</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RabbitListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">queuesToDeclare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;boot_work&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><ul><li><strong><code>@RabbitListener</code></strong>：注解用于监听指定队列的消息。</li><li><strong><code>queuesToDeclare</code></strong>：声明队列名称（<code>boot_work</code>）。</li><li><strong><code>@Queue</code></strong>：声明队列的详细信息。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consumer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String msg,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AmqpHeaders.DELIVERY_TAG) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deliveryTag,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Channel channel</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) throws IOException, InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模拟消息处理时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basicAck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deliveryTag, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 确认消息已处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;消费者1 消息内容为：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong><code>msg</code></strong>：接收到的消息内容。</li><li><strong><code>deliveryTag</code></strong>：消息的唯一标识，用于确认消息是否成功处理。</li><li><strong><code>Channel</code></strong>：RabbitMQ 的通道，用于执行消息确认操作。</li><li><strong><code>basicAck</code></strong>：确认消息已处理，避免消息重复发送。 <ul><li>第一个参数是 <code>deliveryTag</code>。</li><li>第二个参数是 <code>multiple</code>，表示是否批量确认。</li></ul></li></ul></li><li><p><strong>运行逻辑</strong> 消费者监听队列 <code>boot_work</code>，接收到消息后模拟处理时间（<code>Thread.sleep(1000)</code>），然后通过 <code>channel.basicAck</code> 发送确认信号，表示消息已处理完成。</p></li></ol><h3 id="三-效果" tabindex="-1">（三）效果 <a class="header-anchor" href="#三-效果" aria-label="Permalink to &quot;（三）效果&quot;">​</a></h3><p><img src="https://imgtu.oss-cn-beijing.aliyuncs.com/blog_img/image-20250216102608684.png" alt="image-20250216102608684"></p><p>可以看到休眠的时长不同，消费的速度不同，侧面证明该模式适用于任务分配场景，多个消费者可以并行处理任务，提高效率。</p><h2 id="三、pub-sub-模式" tabindex="-1">三、Pub/Sub 模式 <a class="header-anchor" href="#三、pub-sub-模式" aria-label="Permalink to &quot;三、Pub/Sub 模式&quot;">​</a></h2><h3 id="一-pub-sub-模式概述" tabindex="-1">（一）Pub/Sub 模式概述 <a class="header-anchor" href="#一-pub-sub-模式概述" aria-label="Permalink to &quot;（一）Pub/Sub 模式概述&quot;">​</a></h3><p>Pub/Sub（发布/订阅）模式是一种消息传递模式，生产者将消息发送到一个交换机（Exchange），而不是直接发送到队列。消费者通过绑定交换机来接收消息。这种模式允许多个消费者订阅同一个消息源，实现消息的广播。</p><h3 id="二-生产者" tabindex="-1">（二）生产者 <a class="header-anchor" href="#二-生产者" aria-label="Permalink to &quot;（二）生产者&quot;">​</a></h3><ol><li><p><strong>功能描述</strong> 生产者通过 <code>RabbitTemplate</code> 将消息发送到一个名为 <code>boot-pubsub</code> 的交换机。</p></li><li><p><strong>关键代码解析</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rabbitTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">convertAndSend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;boot-pubsub&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg);</span></span></code></pre></div><ul><li><strong><code>convertAndSend</code> 方法</strong>： <ul><li>第一个参数是交换机名称（<code>boot-pubsub</code>）。</li><li>第二个参数是路由键（这里为空字符串，表示不指定路由键）。</li><li>第三个参数是消息内容（<code>msg</code>）。</li></ul></li><li><strong>交换机类型</strong>：<code>boot-pubsub</code> 是一个 <code>fanout</code> 类型的交换机，它会将消息广播到所有绑定的队列。</li></ul></li><li><p><strong>运行逻辑</strong> 生产者调用 <code>/sendPubsub</code> 接口时，将消息发送到 <code>boot-pubsub</code> 交换机，交换机会将消息广播到所有绑定的队列。</p></li><li><p><strong>运行结果</strong></p><p><img src="https://imgtu.oss-cn-beijing.aliyuncs.com/blog_img/image-20250216104227902.png" alt="image-20250216104227902"></p></li></ol><hr><h3 id="三-消费者" tabindex="-1">（三）消费者 <a class="header-anchor" href="#三-消费者" aria-label="Permalink to &quot;（三）消费者&quot;">​</a></h3><ol><li><p><strong>功能描述</strong> 消费者通过绑定到 <code>boot-pubsub</code> 交换机接收消息，并处理接收到的消息。</p></li><li><p><strong>关键代码解析</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RabbitListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bindings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">QueueBinding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                exchange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;boot-pubsub&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fanout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consumer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String msg) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;consumer 4 消息内容为：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong><code>@RabbitListener</code></strong>：注解用于监听消息。</li><li><strong><code>@QueueBinding</code></strong>：声明队列与交换机的绑定关系。 <ul><li><strong><code>value = @Queue</code></strong>：声明一个匿名队列。</li><li><strong><code>exchange = @Exchange</code></strong>：声明交换机的名称（<code>boot-pubsub</code>）和类型（<code>fanout</code>）。</li></ul></li><li><strong><code>consumer</code> 方法</strong>：处理接收到的消息，并打印消息内容。</li></ul></li><li><p><strong>运行逻辑</strong> 消费者绑定到 <code>boot-pubsub</code> 交换机，接收所有广播的消息，并打印消息内容。</p></li><li><p><strong>运行效果</strong></p><p><img src="https://imgtu.oss-cn-beijing.aliyuncs.com/blog_img/image-20250216104255415.png" alt="image-20250216104255415"></p></li></ol><hr><h3 id="四-pub-sub-模式特点" tabindex="-1">（四）Pub/Sub 模式特点 <a class="header-anchor" href="#四-pub-sub-模式特点" aria-label="Permalink to &quot;（四）Pub/Sub 模式特点&quot;">​</a></h3><ol><li><strong>广播机制</strong> 生产者发送的消息会被广播到所有绑定到交换机的队列，多个消费者可以同时接收相同的消息。</li><li><strong>解耦合</strong> 生产者和消费者之间通过交换机解耦，生产者无需知道消费者的存在，消费者也无需知道生产者的存在。</li><li><strong>动态绑定</strong> 可以动态添加或移除消费者，而无需修改生产者的代码。</li></ol><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><hr><h2 id="四、routing-模式" tabindex="-1">四、Routing 模式 <a class="header-anchor" href="#四、routing-模式" aria-label="Permalink to &quot;四、Routing 模式&quot;">​</a></h2><h3 id="一-routing-模式概述" tabindex="-1">（一）Routing 模式概述 <a class="header-anchor" href="#一-routing-模式概述" aria-label="Permalink to &quot;（一）Routing 模式概述&quot;">​</a></h3><p>Routing 模式是一种基于路由键（Routing Key）的消息路由模式。生产者将消息发送到 <code>direct</code> 类型的交换机，并指定一个路由键。消费者通过绑定到交换机并指定绑定键（Binding Key）来接收消息。只有路由键与绑定键完全匹配时，消息才会被路由到对应的队列。</p><hr><h3 id="二-生产者-1" tabindex="-1">（二）生产者 <a class="header-anchor" href="#二-生产者-1" aria-label="Permalink to &quot;（二）生产者&quot;">​</a></h3><ol><li><p><strong>功能描述</strong> 生产者通过 <code>RabbitTemplate</code> 将消息发送到 <code>boot-routing</code> 交换机，并指定路由键（<code>key</code>）。</p></li><li><p><strong>关键代码解析</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rabbitTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">convertAndSend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;boot-routing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, key, msg);</span></span></code></pre></div><ul><li><strong><code>boot-routing</code></strong>：交换机名称，类型为 <code>direct</code>。</li><li><strong><code>key</code></strong>：路由键，由方法参数传入，用于指定消息的路由规则。</li><li><strong><code>msg</code></strong>：消息内容，由方法参数传入。</li></ul></li><li><p><strong>运行逻辑</strong> 生产者调用 <code>/sendRouting</code> 接口时，将消息发送到 <code>boot-routing</code> 交换机，并通过路由键决定消息的去向。</p></li></ol><p><img src="https://imgtu.oss-cn-beijing.aliyuncs.com/blog_img/image-20250216113239428.png" alt="image-20250216113239428"></p><hr><h3 id="三-消费者-1" tabindex="-1">（三）消费者 <a class="header-anchor" href="#三-消费者-1" aria-label="Permalink to &quot;（三）消费者&quot;">​</a></h3><ol><li><p><strong>功能描述</strong> 消费者通过绑定到 <code>boot-routing</code> 交换机接收消息，并处理接收到的消息。</p></li><li><p><strong>关键代码解析</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RabbitListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bindings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">QueueBinding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                exchange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;boot-routing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;direct&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;trace&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consumer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String msg) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;consumer 6 消息内容为：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong><code>@RabbitListener</code></strong>：注解用于监听消息。</li><li><strong><code>@QueueBinding</code></strong>：声明队列与交换机的绑定关系。 <ul><li><strong><code>value = @Queue</code></strong>：声明一个匿名队列。</li><li><strong><code>exchange = @Exchange</code></strong>：声明交换机的名称（<code>boot-routing</code>）和类型（<code>direct</code>）。</li><li><strong><code>key = {&quot;trace&quot;}</code></strong>：绑定键，表示该队列只接收路由键为 <code>trace</code> 的消息。</li></ul></li><li><strong><code>consumer</code> 方法</strong>：处理接收到的消息，并打印消息内容。</li></ul></li><li><p><strong>运行逻辑</strong> 消费者绑定到 <code>boot-routing</code> 交换机，并通过绑定键 <code>trace</code> 接收匹配的消息。</p></li></ol><p><img src="https://imgtu.oss-cn-beijing.aliyuncs.com/blog_img/image-20250216113302874.png" alt="image-20250216113302874"></p><hr><h3 id="四-routing-模式特点" tabindex="-1">（四）Routing 模式特点 <a class="header-anchor" href="#四-routing-模式特点" aria-label="Permalink to &quot;（四）Routing 模式特点&quot;">​</a></h3><ol><li><p><strong>精确匹配</strong><code>direct</code> 类型的交换机要求路由键与绑定键完全匹配，消息才会被路由到对应的队列。</p></li><li><p><strong>多队列绑定</strong> 一个交换机可以绑定多个队列，每个队列可以指定不同的绑定键。</p></li><li><p><strong>解耦合</strong> 生产者和消费者之间通过交换机解耦，生产者无需知道消费者的存在，消费者也无需知道生产者的存在。</p></li></ol><h2 id="五、topic-模式" tabindex="-1">五、Topic 模式 <a class="header-anchor" href="#五、topic-模式" aria-label="Permalink to &quot;五、Topic 模式&quot;">​</a></h2><h3 id="一-topic-模式概述" tabindex="-1">（一）Topic 模式概述 <a class="header-anchor" href="#一-topic-模式概述" aria-label="Permalink to &quot;（一）Topic 模式概述&quot;">​</a></h3><p>Topic 模式是一种灵活的发布/订阅消息模式，适用于需要根据动态路由规则分发消息的场景。生产者将消息发送到一个 <code>topic</code> 类型的交换机，并指定一个路由键（Routing Key）。消费者通过绑定交换机并指定匹配规则（Binding Key）来接收消息。<code>topic</code> 类型的交换机支持模糊匹配，允许更灵活的消息路由。</p><h3 id="二-生产者-2" tabindex="-1">（二）生产者 <a class="header-anchor" href="#二-生产者-2" aria-label="Permalink to &quot;（二）生产者&quot;">​</a></h3><ol><li><p><strong>功能描述</strong> 生产者通过 <code>RabbitTemplate</code> 将消息发送到 <code>boot-topic</code> 交换机，并指定路由键（<code>key</code>）。</p></li><li><p><strong>关键代码解析</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rabbitTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">convertAndSend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;boot-topic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, key, msg);</span></span></code></pre></div><ul><li><strong><code>boot-topic</code></strong>：交换机名称，类型为 <code>topic</code>。</li><li><strong><code>key</code></strong>：路由键，由方法参数传入，用于指定消息的路由规则。例如，<code>user.login</code> 或 <code>user.register</code>。</li><li><strong><code>msg</code></strong>：消息内容，由方法参数传入。</li></ul></li><li><p><strong>运行逻辑</strong> 生产者调用 <code>/sendTopic</code> 接口时，将消息发送到 <code>boot-topic</code> 交换机，并通过路由键决定消息的去向。交换机会根据绑定规则将消息路由到匹配的队列。</p></li></ol><p><img src="https://imgtu.oss-cn-beijing.aliyuncs.com/blog_img/image-20250216123803069.png" alt="image-20250216123803069"></p><hr><h3 id="三-消费者-2" tabindex="-1">（三）消费者 <a class="header-anchor" href="#三-消费者-2" aria-label="Permalink to &quot;（三）消费者&quot;">​</a></h3><ol><li><p><strong>功能描述</strong> 消费者通过绑定到 <code>boot-topic</code> 交换机接收消息，并处理接收到的消息。</p></li><li><p><strong>关键代码解析</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RabbitListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bindings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">QueueBinding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                exchange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Exchange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;boot-topic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;topic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user.*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consumer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String msg) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;consumer 8 user.* 消息内容为：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong><code>@RabbitListener</code></strong>：注解用于监听消息。</li><li><strong><code>@QueueBinding</code></strong>：声明队列与交换机的绑定关系。 <ul><li><strong><code>value = @Queue</code></strong>：声明一个匿名队列。</li><li><strong><code>exchange = @Exchange</code></strong>：声明交换机的名称（<code>boot-topic</code>）和类型（<code>topic</code>）。</li><li><strong><code>key = {&quot;user.\\*&quot;}</code></strong>：绑定键，表示该队列只接收路由键以 <code>user.</code> 开头的消息（例如 <code>user.login</code> 或 <code>user.register</code>）。</li></ul></li><li><strong><code>consumer</code> 方法</strong>：处理接收到的消息，并打印消息内容。</li></ul></li><li><p><strong>运行逻辑</strong> 消费者绑定到 <code>boot-topic</code> 交换机，并通过绑定键 <code>user.*</code> 接收匹配的消息。例如，生产者发送路由键为 <code>user.login</code> 的消息时，该消费者会接收并处理该消息。</p><p><img src="https://imgtu.oss-cn-beijing.aliyuncs.com/blog_img/image-20250216123818814.png" alt="image-20250216123818814"></p></li></ol><hr><h3 id="四-topic-模式特点" tabindex="-1">（四）Topic 模式特点 <a class="header-anchor" href="#四-topic-模式特点" aria-label="Permalink to &quot;（四）Topic 模式特点&quot;">​</a></h3><ol><li><strong>灵活的路由规则</strong><ul><li><code>topic</code> 类型的交换机支持模糊匹配： <ul><li><code>*</code>（星号）：匹配一个单词。</li><li><code>#</code>（井号）：匹配零个或多个单词。</li></ul></li><li>例如，路由键为 <code>user.login</code> 的消息可以被绑定键为 <code>user.*</code> 或 <code>user.login</code> 的队列接收。</li></ul></li><li><strong>动态绑定</strong> 消费者可以根据需要动态绑定不同的队列，而无需修改生产者的代码。</li><li><strong>解耦合</strong> 生产者和消费者之间通过交换机解耦，生产者无需知道消费者的存在，消费者也无需知道生产者的存在。</li></ol><hr><h3 id="五-注意事项" tabindex="-1">（五）注意事项 <a class="header-anchor" href="#五-注意事项" aria-label="Permalink to &quot;（五）注意事项&quot;">​</a></h3><ol><li><strong>交换机类型</strong> 确保交换机类型为 <code>topic</code>，因为 <code>topic</code> 类型的交换机支持模糊匹配。</li><li><strong>绑定键的正确性</strong> 消费者需要正确设置绑定键（<code>key</code>），否则无法接收到匹配的消息。</li><li><strong>路由键的格式</strong> 路由键应使用点分隔符（<code>.</code>），例如 <code>user.login</code> 或 <code>trace.error</code>，以符合 <code>topic</code> 交换机的匹配规则。</li><li><strong>队列声明</strong> 如果使用匿名队列（<code>@Queue</code>），队列会在消费者启动时自动创建，但在 RabbitMQ 管理界面中可能看不到队列名称。如果需要持久化队列，可以显式声明队列名称。</li><li><strong>消息丢失问题</strong> 如果没有消费者绑定到匹配的路由键，消息可能会丢失。可以通过设置交换机的 DLX（Dead Letter Exchange）来处理未消费的消息。</li></ol>`,76)),h(i)])}const y=a(p,[["render",k]]);export{u as __pageData,y as default};
